/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package imdb;

import java.awt.List;
import java.io.BufferedInputStream;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.nio.charset.Charset;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JList;

/**
 *
 * @author Toshiba
 */
public class Search extends javax.swing.JFrame {

    /**
     * Creates new form Search
     */
    public Search() {
        initComponents();
        jListOutputMovie.setVisible(false);
        jListOutputActor.setVisible(false);
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jCheckBoxMenuItem1 = new javax.swing.JCheckBoxMenuItem();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextAreaSearch = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        jListOutputMovie = new javax.swing.JList<>();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jListOutputActor = new javax.swing.JList<>();
        jLabel2 = new javax.swing.JLabel();
        jCheckBox1 = new javax.swing.JCheckBox();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();

        jCheckBoxMenuItem1.setSelected(true);
        jCheckBoxMenuItem1.setText("jCheckBoxMenuItem1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTextAreaSearch.setColumns(20);
        jTextAreaSearch.setRows(5);
        jTextAreaSearch.setText("Search");
        jScrollPane1.setViewportView(jTextAreaSearch);

        jListOutputMovie.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jListOutputMovieValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(jListOutputMovie);

        jButton1.setText("Search Movie");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Search Movies by Actor");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("jButton3");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jLabel1.setText("Movie name");

        jListOutputActor.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jListOutputActorValueChanged(evt);
            }
        });
        jScrollPane3.setViewportView(jListOutputActor);

        jLabel2.setText("have it?");

        jCheckBox1.setText("Yes");

        jMenu1.setText("File");
        jMenuBar1.add(jMenu1);

        jMenu2.setText("Update");

        jMenuItem1.setText("jMenuItem1");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem1);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 224, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 1179, Short.MAX_VALUE)
                        .addComponent(jButton3))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 262, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(33, 33, 33)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(44, 44, 44)
                                .addComponent(jCheckBox1)))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(18, 18, Short.MAX_VALUE)
                        .addComponent(jButton3))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 10, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton2)
                            .addComponent(jButton1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 569, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel1)
                                        .addGap(25, 25, 25)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(jLabel2)
                                            .addComponent(jCheckBox1))))
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addContainerGap())))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
       String movietitle =jTextAreaSearch.getText();
        try {
            searchMovie(movietitle);
        } catch (IOException ex) {
            Logger.getLogger(Search.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
       IMDB imdb = new IMDB();
        try {
            imdb.publicUpdataCSVFiles();
            System.out.println("updated");
        } catch (Exception ex) {
            Logger.getLogger(Search.class.getName()).log(Level.SEVERE, null, ex);
        }
       
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
      String actor = jTextAreaSearch.getText();
      try {
           searchActor(actor);
        } catch (IOException ex) {
            Logger.getLogger(Search.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        String moviedata = jListOutputMovie.getSelectedValue();
        Boolean haveit = this.jCheckBox1.isSelected();
        
        System.out.println(haveit);
        
        try {
            if(haveit){
                FileWriter fw = new FileWriter(new File("C:\\Users\\Toshiba\\Documents\\NetBeansProjects\\IMDB\\haves.csv"));
                fw.append(moviedata);
                fw.append(";");
                fw.append(haveit.toString());
                fw.append("\n");
                    fw.flush();
        fw.close();

            }else{
                
            }
        } catch (IOException ex) {
            Logger.getLogger(Search.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jListOutputMovieValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jListOutputMovieValueChanged
        String selectedValue = jListOutputMovie.getSelectedValue();
        
        this.jLabel1.setText(selectedValue);
        
        
        
    }//GEN-LAST:event_jListOutputMovieValueChanged

    private void jListOutputActorValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jListOutputActorValueChanged
        FileInputStream fis=null;
        try {
            File file=new File("C:\\Users\\Toshiba\\Documents\\NetBeansProjects\\IMDB\\actors.csv");
            DefaultListModel listModel = new DefaultListModel();
            fis = new FileInputStream(file);
            BufferedInputStream bis = new BufferedInputStream(fis);
            BufferedReader dis = new BufferedReader(new InputStreamReader(bis, Charset.forName("ISO-8859-1")));
            while (dis.ready()){
                String line = dis.readLine();
                String[] csvLine = line.toLowerCase().split(";");
                
                               
                if(csvLine[0].contains(this.jListOutputActor.getSelectedValue().toLowerCase())){
                    if(csvLine[2].toString().startsWith("\"")){
                    listModel.addElement(csvLine[2].toString() + " " + csvLine[6].toString());
                    }else{
                    listModel.addElement(csvLine[2].toString());}
                }
            }
            file=new File("C:\\Users\\Toshiba\\Documents\\NetBeansProjects\\IMDB\\actresses.csv");
            fis = new FileInputStream(file);
            bis = new BufferedInputStream(fis);
            dis = new BufferedReader(new InputStreamReader(bis, Charset.forName("ISO-8859-1")));
            while (dis.ready()){
                String line = dis.readLine();
                String[] csvLine = line.toLowerCase().split(";");
                
                if(csvLine[0].contains(this.jListOutputActor.getSelectedValue().toLowerCase())){
                    if(csvLine[2].toString().startsWith("\"")){
                    listModel.addElement(csvLine[2].toString() + " " + csvLine[6].toString());
                    }else{
                    listModel.addElement(csvLine[2].toString());}
                }
            }
            jListOutputMovie.setVisible(true);
            jListOutputMovie.setModel(listModel);
        } catch (FileNotFoundException ex) {
            Logger.getLogger(Search.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(Search.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                fis.close();
            } catch (IOException ex) {
                Logger.getLogger(Search.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_jListOutputActorValueChanged

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Search.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Search.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Search.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Search.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Search().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JList<String> jListOutputActor;
    private javax.swing.JList<String> jListOutputMovie;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextArea jTextAreaSearch;
    // End of variables declaration//GEN-END:variables

    private void searchMovie(String movietitle) throws FileNotFoundException, IOException {
        jListOutputActor.setVisible(false);
        File file=new File("C:\\Users\\Toshiba\\Documents\\NetBeansProjects\\IMDB\\movies.csv");
        
        DefaultListModel listModel = new DefaultListModel();
        
         FileInputStream fis = new FileInputStream(file);
        BufferedInputStream bis = new BufferedInputStream(fis);
        BufferedReader dis = new BufferedReader(new InputStreamReader(bis, Charset.forName("ISO-8859-1")));
        
       
        while (dis.ready()){
            String line = dis.readLine();
            String[] csvLine = line.toLowerCase().split(";");
            
            if(csvLine[0].contains(movietitle.toLowerCase())){
                listModel.addElement(line);
                System.out.println("found one");
            }
        }
        
       
        
        jListOutputMovie.setVisible(true);
         jListOutputMovie.setModel(listModel);

         }
    private void searchActor(String actor) throws FileNotFoundException, IOException{
        jListOutputMovie.setVisible(false);
        File file=new File("C:\\Users\\Toshiba\\Documents\\NetBeansProjects\\IMDB\\actors.csv");
        File file2 = new File("C:\\Users\\Toshiba\\Documents\\NetBeansProjects\\IMDB\\actresses.csv");
        DefaultListModel listModel = new DefaultListModel();
        
        FileInputStream fis = new FileInputStream(file);
        BufferedInputStream bis = new BufferedInputStream(fis);
        BufferedReader dis = new BufferedReader(new InputStreamReader(bis, Charset.forName("ISO-8859-1")));
        
       
        while (dis.ready()){
            String line = dis.readLine();
            String[] csvLine = line.toLowerCase().split(";");
            
            
            if(csvLine[0].contains(actor.toLowerCase())){
                if(!listModel.contains(csvLine[0])){
                    listModel.addElement(csvLine[0]);
                }
                
            }
        }
        
        fis = new FileInputStream(file2);
        bis = new BufferedInputStream(fis);
        dis = new BufferedReader(new InputStreamReader(bis, Charset.forName("ISO-8859-1")));

        
        while (dis.ready()){
            String line = dis.readLine();
            String[] csvLine = line.toLowerCase().split(";");
            
            
            if(csvLine[0].contains(actor.toLowerCase())){
                if(!listModel.contains(csvLine[0])){
                    listModel.addElement(csvLine[0]);
                }
                
            }
        }
        jListOutputActor.setVisible(true);
         jListOutputActor.setModel(listModel);

         
    }
}
